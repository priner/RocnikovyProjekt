
# This file was *autogenerated* from the file RemovableVerticesSubstitution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_10 = Integer(10); _sage_const_22 = Integer(22); _sage_const_32 = Integer(32); _sage_const_26 = Integer(26); _sage_const_24 = Integer(24)
import sys
sys.path.append('../')
sys.path.append('../../')

import itertools
import GraphParser
import toBr
import GeneratorHelper as GH

halin = Graph(GraphParser.parse("halinDipol")[_sage_const_0 ])
halin.relabel(dict([(x, (_sage_const_2 , x)) for x in halin.vertices()]))

baseGraphName = ""
cubicGraphSizes = []
verticesForSubstitution = []
outputFileName = ""

for s in sys.argv:
	ss = s.split("=", maxsplit=1)
	if ss[_sage_const_0 ] == "graph":
		baseGraphName = ss[_sage_const_1 ]
	if ss[_sage_const_0 ] == "sizes":
		cubicGraphSizes = [ int(x) for x in ss[_sage_const_1 ].split(",")]
	if ss[_sage_const_0 ] == "vertices":
		verticesForSubstitution = [ int(x) for x in ss[_sage_const_1 ].split(",")]
	if ss[_sage_const_0 ] == "output":
		outputFileName = ss[_sage_const_1 ]

if baseGraphName == "":
	print "parameter \"graph\" not provided"
	exit(_sage_const_1 )
if cubicGraphSizes == []:
	print "parameter \"sizes\" not provided"
	exit(_sage_const_1 )
if verticesForSubstitution == []:
	print "parameter \"vertices\" not provided"
	exit(_sage_const_1 )
if outputFileName == "":
	print "parameter \"output\" not provided"
	exit(_sage_const_1 )


def substituteWithPermutations(baseGraph, cub, vertexNumberInBase, vertexNumberInCub ):

	g1 = baseGraph.copy();
	g1.delete_vertex(vertexNumberInBase)
	g1.relabel(dict([(x, (_sage_const_0 , x)) for x in g1.vertices()]))

	g2 = cub.copy()
	g2.delete_vertex(vertexNumberInCub)
	g2.relabel(dict([(x, (_sage_const_1 , x)) for x in g2.vertices()]))

	graphs = []

	connector = baseGraph.neighbors(vertexNumberInBase)

	for i in range(_sage_const_3 ):
		for ns in itertools.permutations(cub.neighbors(vertexNumberInCub)):
			g = g1.union(g2).union(halin)
			g.add_edge((_sage_const_0 , connector[_sage_const_1 ]), (_sage_const_1 , ns[_sage_const_1 ]))
			g.add_edge((_sage_const_0 , connector[_sage_const_2 ]), (_sage_const_1 , ns[_sage_const_2 ]))

			con1 = g1.neighbors((_sage_const_0 , connector[_sage_const_0 ]))
			con2 = g2.neighbors((_sage_const_1 , ns[_sage_const_0 ]))
			g.add_edge(con1[_sage_const_0 ], (_sage_const_2 , _sage_const_0 ))
			g.add_edge(con1[_sage_const_1 ], (_sage_const_2 , _sage_const_2 ))
			g.add_edge(con2[_sage_const_0 ], (_sage_const_2 , _sage_const_22 ))
			g.add_edge(con2[_sage_const_1 ], (_sage_const_2 , _sage_const_24 ))

			g.delete_vertex((_sage_const_0 , connector[_sage_const_0 ]))
			g.delete_vertex((_sage_const_1 , ns[_sage_const_0 ]))

			g.relabel()
			graphs.append(g)

		connector = [connector[-_sage_const_1 ]] + connector[:-_sage_const_1 ]

	return graphs



def substituteAll(baseGraph, vertices, cubs):
	graphs = []

	for cub in cubs:
		
		for vertexNumber in vertices:
			for v in cub.vertices():
				gs = substituteWithPermutations(baseGraph, cub, vertexNumber, v)

				for g in gs:
					toBr.printToFile([g], "./tmp/tmp1")
					(girth, cc) = GH.getGirthAndCC("./tmp/tmp1")

					if not GH.existsInPrevious(graphs, g) and girth >= _sage_const_5  and cc >= _sage_const_4 :
						graphs.append(g)
						if len(graphs) % _sage_const_10  == _sage_const_0 :
						 	toBr.printToFile(graphs, "gen/" + outputFileName + "." + str(len(g.vertices())))

	return graphs



for i in cubicGraphSizes:
	print "cub size ", i
	cubs = GH.readCubicGraphs("./cubicGraphs/cub" + str(i) + "-gir5.g6")

	baseGraph = Graph(GraphParser.parse(baseGraphName)[_sage_const_0 ])

	generated = substituteAll(baseGraph, verticesForSubstitution, cubs)
	print "generated", len(generated), "graphs"

	toBr.printToFile(generated, "gen/" + outputFileName + "." + str(i+_sage_const_26 +_sage_const_32 -_sage_const_2 ) )


